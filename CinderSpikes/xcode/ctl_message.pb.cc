// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctl_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtlMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CtlMessage_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctl_5fmessage_2eproto() {
  protobuf_AddDesc_ctl_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctl_message.proto");
  GOOGLE_CHECK(file != NULL);
  CtlMessage_descriptor_ = file->message_type(0);
  static const int CtlMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlMessage, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlMessage, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlMessage, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlMessage, value_),
  };
  CtlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CtlMessage_descriptor_,
      CtlMessage::default_instance_,
      CtlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CtlMessage));
  CtlMessage_MessageType_descriptor_ = CtlMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctl_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CtlMessage_descriptor_, &CtlMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctl_5fmessage_2eproto() {
  delete CtlMessage::default_instance_;
  delete CtlMessage_reflection_;
}

void protobuf_AddDesc_ctl_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ctl_message.proto\"\244\002\n\nCtlMessage\022\022\n\nch"
    "annel_id\030\001 \001(\005\022\022\n\ntime_stamp\030\002 \001(\003\022-\n\014me"
    "ssage_type\030\003 \001(\0162\027.CtlMessage.MessageTyp"
    "e\022\r\n\005value\030\004 \001(\001\"\257\001\n\013MessageType\022\r\n\tTHRE"
    "SHOLD\020\000\022\027\n\023AUTOTHRESHOLD_STATE\020\001\022\030\n\024AUTO"
    "THRESHOLD_FACTOR\020\002\022\021\n\rAMPLITUDE_MAX\020\003\022\021\n"
    "\rAMPLITUDE_MIN\020\004\022\014\n\010TIME_MAX\020\005\022\014\n\010TIME_M"
    "IN\020\006\022\022\n\016UNITS_PER_VOLT\020\007\022\010\n\004GAIN\020\010", 314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctl_message.proto", &protobuf_RegisterTypes);
  CtlMessage::default_instance_ = new CtlMessage();
  CtlMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctl_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctl_5fmessage_2eproto {
  StaticDescriptorInitializer_ctl_5fmessage_2eproto() {
    protobuf_AddDesc_ctl_5fmessage_2eproto();
  }
} static_descriptor_initializer_ctl_5fmessage_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* CtlMessage_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtlMessage_MessageType_descriptor_;
}
bool CtlMessage_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CtlMessage_MessageType CtlMessage::THRESHOLD;
const CtlMessage_MessageType CtlMessage::AUTOTHRESHOLD_STATE;
const CtlMessage_MessageType CtlMessage::AUTOTHRESHOLD_FACTOR;
const CtlMessage_MessageType CtlMessage::AMPLITUDE_MAX;
const CtlMessage_MessageType CtlMessage::AMPLITUDE_MIN;
const CtlMessage_MessageType CtlMessage::TIME_MAX;
const CtlMessage_MessageType CtlMessage::TIME_MIN;
const CtlMessage_MessageType CtlMessage::UNITS_PER_VOLT;
const CtlMessage_MessageType CtlMessage::GAIN;
const CtlMessage_MessageType CtlMessage::MessageType_MIN;
const CtlMessage_MessageType CtlMessage::MessageType_MAX;
const int CtlMessage::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CtlMessage::kChannelIdFieldNumber;
const int CtlMessage::kTimeStampFieldNumber;
const int CtlMessage::kMessageTypeFieldNumber;
const int CtlMessage::kValueFieldNumber;
#endif  // !_MSC_VER

CtlMessage::CtlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CtlMessage::InitAsDefaultInstance() {
}

CtlMessage::CtlMessage(const CtlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CtlMessage::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  message_type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtlMessage::~CtlMessage() {
  SharedDtor();
}

void CtlMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtlMessage_descriptor_;
}

const CtlMessage& CtlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctl_5fmessage_2eproto();  return *default_instance_;
}

CtlMessage* CtlMessage::default_instance_ = NULL;

CtlMessage* CtlMessage::New() const {
  return new CtlMessage;
}

void CtlMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_id_ = 0;
    time_stamp_ = GOOGLE_LONGLONG(0);
    message_type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CtlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }
      
      // optional int64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_message_type;
        break;
      }
      
      // optional .CtlMessage.MessageType message_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CtlMessage_MessageType_IsValid(value)) {
            set_message_type(static_cast< ::CtlMessage_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_value;
        break;
      }
      
      // optional double value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CtlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_id(), output);
  }
  
  // optional int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_stamp(), output);
  }
  
  // optional .CtlMessage.MessageType message_type = 3;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->message_type(), output);
  }
  
  // optional double value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CtlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel_id(), target);
  }
  
  // optional int64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_stamp(), target);
  }
  
  // optional .CtlMessage.MessageType message_type = 3;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->message_type(), target);
  }
  
  // optional double value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CtlMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_id());
    }
    
    // optional int64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }
    
    // optional .CtlMessage.MessageType message_type = 3;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
    }
    
    // optional double value = 4;
    if (has_value()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CtlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CtlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CtlMessage::MergeFrom(const CtlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CtlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtlMessage::CopyFrom(const CtlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtlMessage::IsInitialized() const {
  
  return true;
}

void CtlMessage::Swap(CtlMessage* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(message_type_, other->message_type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CtlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtlMessage_descriptor_;
  metadata.reflection = CtlMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spike_wave.proto

#ifndef PROTOBUF_spike_5fwave_2eproto__INCLUDED
#define PROTOBUF_spike_5fwave_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_spike_5fwave_2eproto();
void protobuf_AssignDesc_spike_5fwave_2eproto();
void protobuf_ShutdownFile_spike_5fwave_2eproto();

class SpikeWaveBuffer;

// ===================================================================

class SpikeWaveBuffer : public ::google::protobuf::Message {
 public:
  SpikeWaveBuffer();
  virtual ~SpikeWaveBuffer();
  
  SpikeWaveBuffer(const SpikeWaveBuffer& from);
  
  inline SpikeWaveBuffer& operator=(const SpikeWaveBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpikeWaveBuffer& default_instance();
  
  void Swap(SpikeWaveBuffer* other);
  
  // implements Message ----------------------------------------------
  
  SpikeWaveBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpikeWaveBuffer& from);
  void MergeFrom(const SpikeWaveBuffer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::int32 channel_id() const;
  inline void set_channel_id(::google::protobuf::int32 value);
  
  // optional int64 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);
  
  // repeated float wave_sample = 3 [packed = true];
  inline int wave_sample_size() const;
  inline void clear_wave_sample();
  static const int kWaveSampleFieldNumber = 3;
  inline float wave_sample(int index) const;
  inline void set_wave_sample(int index, float value);
  inline void add_wave_sample(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      wave_sample() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_wave_sample();
  
  // @@protoc_insertion_point(class_scope:SpikeWaveBuffer)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_stamp_;
  ::google::protobuf::RepeatedField< float > wave_sample_;
  mutable int _wave_sample_cached_byte_size_;
  ::google::protobuf::int32 channel_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_spike_5fwave_2eproto();
  friend void protobuf_AssignDesc_spike_5fwave_2eproto();
  friend void protobuf_ShutdownFile_spike_5fwave_2eproto();
  
  void InitAsDefaultInstance();
  static SpikeWaveBuffer* default_instance_;
};
// ===================================================================


// ===================================================================

// SpikeWaveBuffer

// optional int32 channel_id = 1;
inline bool SpikeWaveBuffer::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpikeWaveBuffer::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpikeWaveBuffer::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpikeWaveBuffer::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
inline ::google::protobuf::int32 SpikeWaveBuffer::channel_id() const {
  return channel_id_;
}
inline void SpikeWaveBuffer::set_channel_id(::google::protobuf::int32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional int64 time_stamp = 2;
inline bool SpikeWaveBuffer::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpikeWaveBuffer::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpikeWaveBuffer::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpikeWaveBuffer::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 SpikeWaveBuffer::time_stamp() const {
  return time_stamp_;
}
inline void SpikeWaveBuffer::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// repeated float wave_sample = 3 [packed = true];
inline int SpikeWaveBuffer::wave_sample_size() const {
  return wave_sample_.size();
}
inline void SpikeWaveBuffer::clear_wave_sample() {
  wave_sample_.Clear();
}
inline float SpikeWaveBuffer::wave_sample(int index) const {
  return wave_sample_.Get(index);
}
inline void SpikeWaveBuffer::set_wave_sample(int index, float value) {
  wave_sample_.Set(index, value);
}
inline void SpikeWaveBuffer::add_wave_sample(float value) {
  wave_sample_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
SpikeWaveBuffer::wave_sample() const {
  return wave_sample_;
}
inline ::google::protobuf::RepeatedField< float >*
SpikeWaveBuffer::mutable_wave_sample() {
  return &wave_sample_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_spike_5fwave_2eproto__INCLUDED

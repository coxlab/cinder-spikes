// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spike_wave.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SpikeWaveBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpikeWaveBuffer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spike_5fwave_2eproto() {
  protobuf_AddDesc_spike_5fwave_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spike_wave.proto");
  GOOGLE_CHECK(file != NULL);
  SpikeWaveBuffer_descriptor_ = file->message_type(0);
  static const int SpikeWaveBuffer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpikeWaveBuffer, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpikeWaveBuffer, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpikeWaveBuffer, wave_sample_),
  };
  SpikeWaveBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpikeWaveBuffer_descriptor_,
      SpikeWaveBuffer::default_instance_,
      SpikeWaveBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpikeWaveBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpikeWaveBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpikeWaveBuffer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spike_5fwave_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpikeWaveBuffer_descriptor_, &SpikeWaveBuffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spike_5fwave_2eproto() {
  delete SpikeWaveBuffer::default_instance_;
  delete SpikeWaveBuffer_reflection_;
}

void protobuf_AddDesc_spike_5fwave_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020spike_wave.proto\"R\n\017SpikeWaveBuffer\022\022\n"
    "\nchannel_id\030\001 \001(\005\022\022\n\ntime_stamp\030\002 \001(\003\022\027\n"
    "\013wave_sample\030\003 \003(\002B\002\020\001", 102);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spike_wave.proto", &protobuf_RegisterTypes);
  SpikeWaveBuffer::default_instance_ = new SpikeWaveBuffer();
  SpikeWaveBuffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spike_5fwave_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spike_5fwave_2eproto {
  StaticDescriptorInitializer_spike_5fwave_2eproto() {
    protobuf_AddDesc_spike_5fwave_2eproto();
  }
} static_descriptor_initializer_spike_5fwave_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SpikeWaveBuffer::kChannelIdFieldNumber;
const int SpikeWaveBuffer::kTimeStampFieldNumber;
const int SpikeWaveBuffer::kWaveSampleFieldNumber;
#endif  // !_MSC_VER

SpikeWaveBuffer::SpikeWaveBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpikeWaveBuffer::InitAsDefaultInstance() {
}

SpikeWaveBuffer::SpikeWaveBuffer(const SpikeWaveBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpikeWaveBuffer::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpikeWaveBuffer::~SpikeWaveBuffer() {
  SharedDtor();
}

void SpikeWaveBuffer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpikeWaveBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpikeWaveBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpikeWaveBuffer_descriptor_;
}

const SpikeWaveBuffer& SpikeWaveBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spike_5fwave_2eproto();  return *default_instance_;
}

SpikeWaveBuffer* SpikeWaveBuffer::default_instance_ = NULL;

SpikeWaveBuffer* SpikeWaveBuffer::New() const {
  return new SpikeWaveBuffer;
}

void SpikeWaveBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_id_ = 0;
    time_stamp_ = GOOGLE_LONGLONG(0);
  }
  wave_sample_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpikeWaveBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }
      
      // optional int64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_wave_sample;
        break;
      }
      
      // repeated float wave_sample = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wave_sample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_wave_sample())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_wave_sample())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpikeWaveBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_id(), output);
  }
  
  // optional int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_stamp(), output);
  }
  
  // repeated float wave_sample = 3 [packed = true];
  if (this->wave_sample_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_wave_sample_cached_byte_size_);
  }
  for (int i = 0; i < this->wave_sample_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->wave_sample(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpikeWaveBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channel_id = 1;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel_id(), target);
  }
  
  // optional int64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_stamp(), target);
  }
  
  // repeated float wave_sample = 3 [packed = true];
  if (this->wave_sample_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _wave_sample_cached_byte_size_, target);
  }
  for (int i = 0; i < this->wave_sample_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->wave_sample(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpikeWaveBuffer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_id());
    }
    
    // optional int64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }
    
  }
  // repeated float wave_sample = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->wave_sample_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _wave_sample_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpikeWaveBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpikeWaveBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpikeWaveBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpikeWaveBuffer::MergeFrom(const SpikeWaveBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  wave_sample_.MergeFrom(from.wave_sample_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpikeWaveBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpikeWaveBuffer::CopyFrom(const SpikeWaveBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpikeWaveBuffer::IsInitialized() const {
  
  return true;
}

void SpikeWaveBuffer::Swap(SpikeWaveBuffer* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(time_stamp_, other->time_stamp_);
    wave_sample_.Swap(&other->wave_sample_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpikeWaveBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpikeWaveBuffer_descriptor_;
  metadata.reflection = SpikeWaveBuffer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

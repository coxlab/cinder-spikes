// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctl_message.proto

#ifndef PROTOBUF_ctl_5fmessage_2eproto__INCLUDED
#define PROTOBUF_ctl_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ctl_5fmessage_2eproto();
void protobuf_AssignDesc_ctl_5fmessage_2eproto();
void protobuf_ShutdownFile_ctl_5fmessage_2eproto();

class CtlMessage;

enum CtlMessage_MessageType {
  CtlMessage_MessageType_THRESHOLD = 0,
  CtlMessage_MessageType_AUTOTHRESHOLD_STATE = 1,
  CtlMessage_MessageType_AUTOTHRESHOLD_FACTOR = 2,
  CtlMessage_MessageType_AMPLITUDE_MAX = 3,
  CtlMessage_MessageType_AMPLITUDE_MIN = 4,
  CtlMessage_MessageType_TIME_MAX = 5,
  CtlMessage_MessageType_TIME_MIN = 6,
  CtlMessage_MessageType_UNITS_PER_VOLT = 7,
  CtlMessage_MessageType_GAIN = 8
};
bool CtlMessage_MessageType_IsValid(int value);
const CtlMessage_MessageType CtlMessage_MessageType_MessageType_MIN = CtlMessage_MessageType_THRESHOLD;
const CtlMessage_MessageType CtlMessage_MessageType_MessageType_MAX = CtlMessage_MessageType_GAIN;
const int CtlMessage_MessageType_MessageType_ARRAYSIZE = CtlMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CtlMessage_MessageType_descriptor();
inline const ::std::string& CtlMessage_MessageType_Name(CtlMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CtlMessage_MessageType_descriptor(), value);
}
inline bool CtlMessage_MessageType_Parse(
    const ::std::string& name, CtlMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CtlMessage_MessageType>(
    CtlMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class CtlMessage : public ::google::protobuf::Message {
 public:
  CtlMessage();
  virtual ~CtlMessage();
  
  CtlMessage(const CtlMessage& from);
  
  inline CtlMessage& operator=(const CtlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtlMessage& default_instance();
  
  void Swap(CtlMessage* other);
  
  // implements Message ----------------------------------------------
  
  CtlMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtlMessage& from);
  void MergeFrom(const CtlMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CtlMessage_MessageType MessageType;
  static const MessageType THRESHOLD = CtlMessage_MessageType_THRESHOLD;
  static const MessageType AUTOTHRESHOLD_STATE = CtlMessage_MessageType_AUTOTHRESHOLD_STATE;
  static const MessageType AUTOTHRESHOLD_FACTOR = CtlMessage_MessageType_AUTOTHRESHOLD_FACTOR;
  static const MessageType AMPLITUDE_MAX = CtlMessage_MessageType_AMPLITUDE_MAX;
  static const MessageType AMPLITUDE_MIN = CtlMessage_MessageType_AMPLITUDE_MIN;
  static const MessageType TIME_MAX = CtlMessage_MessageType_TIME_MAX;
  static const MessageType TIME_MIN = CtlMessage_MessageType_TIME_MIN;
  static const MessageType UNITS_PER_VOLT = CtlMessage_MessageType_UNITS_PER_VOLT;
  static const MessageType GAIN = CtlMessage_MessageType_GAIN;
  static inline bool MessageType_IsValid(int value) {
    return CtlMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    CtlMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    CtlMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    CtlMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return CtlMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return CtlMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return CtlMessage_MessageType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional int32 channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::int32 channel_id() const;
  inline void set_channel_id(::google::protobuf::int32 value);
  
  // optional int64 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::int64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::int64 value);
  
  // optional .CtlMessage.MessageType message_type = 3;
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 3;
  inline ::CtlMessage_MessageType message_type() const;
  inline void set_message_type(::CtlMessage_MessageType value);
  
  // optional double value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline double value() const;
  inline void set_value(double value);
  
  // @@protoc_insertion_point(class_scope:CtlMessage)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_message_type();
  inline void clear_has_message_type();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_stamp_;
  ::google::protobuf::int32 channel_id_;
  int message_type_;
  double value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ctl_5fmessage_2eproto();
  friend void protobuf_AssignDesc_ctl_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_ctl_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CtlMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// CtlMessage

// optional int32 channel_id = 1;
inline bool CtlMessage::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CtlMessage::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CtlMessage::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CtlMessage::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
inline ::google::protobuf::int32 CtlMessage::channel_id() const {
  return channel_id_;
}
inline void CtlMessage::set_channel_id(::google::protobuf::int32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional int64 time_stamp = 2;
inline bool CtlMessage::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CtlMessage::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CtlMessage::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CtlMessage::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 CtlMessage::time_stamp() const {
  return time_stamp_;
}
inline void CtlMessage::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// optional .CtlMessage.MessageType message_type = 3;
inline bool CtlMessage::has_message_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CtlMessage::set_has_message_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CtlMessage::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CtlMessage::clear_message_type() {
  message_type_ = 0;
  clear_has_message_type();
}
inline ::CtlMessage_MessageType CtlMessage::message_type() const {
  return static_cast< ::CtlMessage_MessageType >(message_type_);
}
inline void CtlMessage::set_message_type(::CtlMessage_MessageType value) {
  GOOGLE_DCHECK(::CtlMessage_MessageType_IsValid(value));
  set_has_message_type();
  message_type_ = value;
}

// optional double value = 4;
inline bool CtlMessage::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CtlMessage::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CtlMessage::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CtlMessage::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double CtlMessage::value() const {
  return value_;
}
inline void CtlMessage::set_value(double value) {
  set_has_value();
  value_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CtlMessage_MessageType>() {
  return ::CtlMessage_MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ctl_5fmessage_2eproto__INCLUDED
